<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
	   xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	   xmlns:resource="clr-namespace:NotesAndReminders.Resources"
	   xmlns:local="clr-namespace:NotesAndReminders.Views"
	   Title="NotesAndReminders"
	   FlyoutBackgroundColor="{AppThemeBinding Light={StaticResource PageBackground},
											   Dark={StaticResource PageBackgroundDark}}"
	   x:Class="NotesAndReminders.AppShell">

	<!--
		The overall app visual hierarchy is defined here, along with navigation.
	
		https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
	-->

	<Shell.FlyoutHeaderTemplate>
		<DataTemplate>
			<StackLayout Orientation="Horizontal"
						 Spacing="15"
						 Padding="15,45,15,20"
						 BackgroundColor="{AppThemeBinding Light={StaticResource PageBackground},
														   Dark={StaticResource PageBackgroundDark}}">
				<Image Source="logo_large"
					   HorizontalOptions="Start"
					   HeightRequest="56" />
				<Label Text="{Binding LogoText}"
					   HorizontalOptions="StartAndExpand"
					   VerticalOptions="CenterAndExpand"
					   FontSize="24" />
			</StackLayout>
		</DataTemplate>
	</Shell.FlyoutHeaderTemplate>

	<Shell.Resources>
		<ResourceDictionary>
			<Style x:Key="BaseStyle" TargetType="Element">
				<Setter Property="Shell.BackgroundColor" Value="{AppThemeBinding Light={StaticResource PageBackground},
																				 Dark={StaticResource PageBackgroundDark}}" />
				<Setter Property="Shell.ForegroundColor" Value="{AppThemeBinding Light={StaticResource PageTitleText},
																				 Dark={StaticResource PageTitleTextDark}}" />
				<Setter Property="Shell.TitleColor" Value="{AppThemeBinding Light={StaticResource PageTitleText},
																			Dark={StaticResource PageTitleTextDark}}" />
				<Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
				<Setter Property="Shell.UnselectedColor" Value="Black" />
				<Setter Property="Shell.TabBarBackgroundColor" Value="{AppThemeBinding Light={StaticResource PageBackground},
																					   Dark={StaticResource PageBackgroundDark}}" />
				<Setter Property="Shell.TabBarForegroundColor" Value="White"/>
				<Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
				<Setter Property="Shell.TabBarTitleColor" Value="{AppThemeBinding Light={StaticResource LabelTextColorPrimary},
																				  Dark={StaticResource LabelTextColorPrimaryDark}}" />
			</Style>
			<Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
			<Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

			<!--
			Default Styles for all Flyout Items
			https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
			-->
			<Style Class="FlyoutItemLabelStyle" TargetType="Label">
				<Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource LabelTextColorPrimary},
																	 Dark={StaticResource LabelTextColorPrimaryDark}}" />
			</Style>
			<Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
				<Setter Property="VisualStateManager.VisualStateGroups">
					<VisualStateGroupList>
						<VisualStateGroup x:Name="CommonStates">
							<VisualState x:Name="Normal">
								<VisualState.Setters>
									<Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{AppThemeBinding Light={StaticResource LabelTextColorPrimary},
																															Dark={StaticResource LabelTextColorPrimaryDark}}" />
								</VisualState.Setters>
							</VisualState>
							<VisualState x:Name="Selected">
								<VisualState.Setters>
									<Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Accent},
																							   Dark={StaticResource AccentDark}}" />
								</VisualState.Setters>
							</VisualState>
						</VisualStateGroup>
					</VisualStateGroupList>
				</Setter>
			</Style>

			<!--
			Custom Style you can apply to any Flyout Item
			-->
			<Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
				<Setter Property="VisualStateManager.VisualStateGroups">
					<VisualStateGroupList>
						<VisualStateGroup x:Name="CommonStates">
							<VisualState x:Name="Normal">
								<VisualState.Setters>
									<Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{AppThemeBinding Light={StaticResource LabelTextColorPrimary},
																															Dark={StaticResource LabelTextColorPrimaryDark}}" />
								</VisualState.Setters>
							</VisualState>
						</VisualStateGroup>
					</VisualStateGroupList>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Shell.Resources>

	<!-- 
		When the Flyout is visible this defines the content to display in the flyout.
		FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
		https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
	-->
	<FlyoutItem Title="{x:Static resource:AppResources.MyNotes}" Icon="{AppThemeBinding Light='icn_note_dark', Dark='icn_note_light'}">
		<ShellContent Route="MyNotesView" ContentTemplate="{DataTemplate local:MyNotesView}" />
	</FlyoutItem>
	<FlyoutItem Title="{x:Static resource:AppResources.Categories}">
		<ShellContent Route="NotesCategoriesView" ContentTemplate="{DataTemplate local:NotesCategoriesView}" />
	</FlyoutItem>
	<FlyoutItem Title="{x:Static resource:AppResources.Profile}" Icon="{AppThemeBinding Light='icn_profile_dark', Dark='icn_profile_light'}">
		<ShellContent Route="ProfileView" ContentTemplate="{DataTemplate local:ProfileView}" />
	</FlyoutItem>

	<!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
	<!--<MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked" />-->

	<!--
		TabBar lets you define content that won't show up in a flyout menu. When this content is active
		the flyout menu won't be available. This is useful for creating areas of the application where 
		you don't want users to be able to navigate away from. If you would like to navigate to this 
		content you can do so by calling 
		await Shell.Current.GoToAsync("//LoginPage");
	-->
	<!--<TabBar>
		<ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
	</TabBar>-->

	<!-- Optional Templates 
	// These may be provided inline as below or as separate classes.

	// This header appears at the top of the Flyout.
	// https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
	<Shell.FlyoutHeaderTemplate>
		<DataTemplate>
			<Grid>ContentHere</Grid>
		</DataTemplate>
	</Shell.FlyoutHeaderTemplate>

	// ItemTemplate is for ShellItems as displayed in a Flyout
	// https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
	<Shell.ItemTemplate>
		<DataTemplate>
			<ContentView>
				Bindable Properties: Title, Icon
			</ContentView>
		</DataTemplate>
	</Shell.ItemTemplate>

	// MenuItemTemplate is for MenuItems as displayed in a Flyout
	// https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
	<Shell.MenuItemTemplate>
		<DataTemplate>
			<ContentView>
				Bindable Properties: Text, Icon
			</ContentView>
		</DataTemplate>
	</Shell.MenuItemTemplate>

	-->

</Shell>
